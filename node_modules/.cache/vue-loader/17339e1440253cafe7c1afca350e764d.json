{"remainingRequest":"C:\\Users\\blown\\Desktop\\GitHub\\Netflix---Clone\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\blown\\Desktop\\GitHub\\Netflix---Clone\\src\\views\\Dashboard\\Dashboard.vue?vue&type=template&id=2131a5ef&scoped=true&","dependencies":[{"path":"C:\\Users\\blown\\Desktop\\GitHub\\Netflix---Clone\\src\\views\\Dashboard\\Dashboard.vue","mtime":1641762969795},{"path":"C:\\Users\\blown\\Desktop\\GitHub\\Netflix---Clone\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641750632059},{"path":"C:\\Users\\blown\\Desktop\\GitHub\\Netflix---Clone\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1641750632760},{"path":"C:\\Users\\blown\\Desktop\\GitHub\\Netflix---Clone\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1641750632059},{"path":"C:\\Users\\blown\\Desktop\\GitHub\\Netflix---Clone\\node_modules\\vue-loader\\lib\\index.js","mtime":1641750629114}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}